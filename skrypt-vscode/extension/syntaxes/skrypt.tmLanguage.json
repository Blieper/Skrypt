{
	"name": "Skrypt",
	"scopeName": "source.skrypt",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#declaration"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#function-call"
		},
		{
			"include": "#variable"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.skrypt",
				"match": "\\b(if|while|for|return|break|continue|using)\\b"
			},
			{
				"name": "storage.modifier.skrypt",
				"match": "\\b(public|private|in|const|strong)\\b"
			}
		]
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.arithmetic.skrypt",
				"match": "[=?:,.+\\-/%*<>^+~!|&]+"
			} ]
		},
		"literals": {
			"patterns": [
				{
					"include": "#string-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#numeric-literal"
				}
			]
		},
		"string-literal": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.skrypt"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.skrypt"
				}
			},
			"name": "string.quoted.double.skrypt",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.skrypt"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.skrypt",
					"match": "\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.skrypt",
					"match": "\\bfalse\\b"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"include": "#binary-literal"
				},
				{
					"include": "#hexadecimal-literal"
				},
				{
					"name": "constant.numeric.decimal.skrypt",
					"match": "\\d+(\\.\\d+)?([eE][-+]?\\d+)?"
				}
			]
		},
		"binary-literal": {
			"patterns": [
				{
					"name": "constant.numeric.binary.skrypt",
					"match": "0b([01])*"
				}
			]
		},
		"hexadecimal-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.skrypt",
					"match": "0x([A-Fa-f\\d])*"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#function-declaration"
				},
				{
					"include": "#class-declaration"
				}
			]
		},	
		"function-declaration": {
			"begin": "\\b(fn)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*)?(\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.function.skrypt"
				},
				"2": {
					"name": "entity.name.function.skrypt"
				},
				"3": {
					"name": "punctuation.separator.parameter.skrypt"
				},
				"4": {
					"name": "punctuation.definition.parameters.begin.skrypt"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.skrypt"
				}
			},
			"name": "meta.function.skrypt",
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "variable.parameter.function.skrypt"
				},
				{
					"match": ",",
					"name": "punctuation.separator.arguments.skrypt"
				}
			]
		},
		"function-call": {
			"name": "entity.name.function.skrypt",
			"match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()"
		},
		"variable": {
			"name": "variable.other.skrypt",
			"match": "(?<=\\.)([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		"class-declaration": {
			"begin": "\\b(class)\\s*(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "storage.class.skrypt"
				},
				"2": {
					"name": "entity.name.function.skrypt"
				},
				"3": {
					"name": "punctuation.separator.parameter.skrypt"
				}
			},
			"end": "\\{",
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "storage.type.skrypt"
				},
				{
					"match": ",",
					"name": "punctuation.separator.arguments.skrypt"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.skrypt",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.skrypt"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.skrypt"
						}
					}
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.skrypt"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.line.double-slash.skrypt",
							"begin": "(?<!/)//(?:(?!/)|(?=//))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.skrypt"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		}
	}
}

